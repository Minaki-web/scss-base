@use 'sass:math';
@use 'sass:map';

// ------------------------------------------------
// functions
// ------------------------------------------------

/// Calculate rem from px unit.
@function rem($val, $base: 16) {
  @return math.div($val, $base) * 1rem;
}

// ------------------------------------------------
// mixins
// ------------------------------------------------

/// Aspect ratio mixin
@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: '';
    float: left;
    padding-top: ($height / $width) * 100%;
  }

  &::after {
    content: '';
    display: block;
    clear: both;
  }

  & > :first-child {
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
  }
}

/// Clearfix mixin
@mixin clearfix() {
  &::after {
    clear: both;
    content: '';
    display: block;
  }
}

/// Breakpoint mixin
$breakpoints: (
  'min': (
    'xs': (
      min-width: 0
    ),
    'sm': (
      min-width: 576px
    ),
    'md': (
      min-width: 768px
    ),
    'lg': (
      min-width: 992px
    ),
    'xl': (
      min-width: 1200px
    ),
    'xxl': (
      min-width: 1400px
    )
  ),
  'max': (
    'xs': (
      max-width: 0
    ),
    'sm': (
      max-width: 575.98px
    ),
    'md': (
      max-width: 767.98px
    ),
    'lg': (
      max-width: 991.98px
    ),
    'xl': (
      max-width: 1199.98px
    ),
    'xxl': (
      max-width: 1399.98px
    )
  )
) !default;
@mixin responsive($breakpoint, $limit: 'min') {
  @media screen and #{inspect( map.get( map.get( $breakpoints, $limit ), $breakpoint ) )} {
    @content;
  }
}

/// Hover state mixin
@mixin hover() {
  &:focus {
    @content;
  }

  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}

/// Letter spacing mixin
@mixin tracking($trackingValue: 0) {
  letter-spacing: math.div($trackingValue, 1000) * 1em;
}

/// Create triangle mixin
/// @param {String} $direction { up | down | right | left | up-right | up-left | down-right | down-left | inset-up | inset-down | inset-right | inset-left }
@mixin triangle($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left: $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

/// Truncate words mixin
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}
